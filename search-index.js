var searchIndex = JSON.parse('{\
"pomelo":{"doc":"pomelo: a WIP compiler for Standard ML ’97","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"pomelo_fmt":{"doc":"Code formatting for SML.","t":[17,8,0,0,0,0,5,10,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,5,13,13,4,3,13,13,17,13,17,17,17,17,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,12,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["INDENT","Printable","buffer","dec","expr","pat","print","print","printer","ty","util","Buffer","borrow","borrow_mut","clear","clone","clone_into","fmt","from","index","index_mut","into","is_empty","left","left_elem","new","offset","pop_left","push_right","storage","to_owned","try_from","try_into","type_id","print_dec","Begin","Break","Breaks","BufElt","Consistent","End","INFINITY","Inconsistent","LINEBREAK","LINE_WIDTH","MAX_BLANKS","NEWLINE","PrintStackEntry","Printer","Text","Token","abstype","add_line_break","add_space_break","advance_left","and_also_expr","atomic_expr","atomic_pat","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breaks","buffer","case_expr","cgroup","check_stack","check_stream","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cons_or_infix_pat","cons_ty","datarep","datatype","dec","endgroup","eq","eq","exception","expr","expr_row","fmt","fmt","fmt","fmt","fmt","fn_expr","from","from","from","from","from","from","from","fun","fun_ty","handle_expr","if_expr","igroup","infix","infix_or_app_expr","infixr","insert_indent","insert_newline","into","into","into","into","into","layered_pat","left_total","len","let_expr","linebreak","list_like","local","margin","match_rules","new","nonfix","offset","open","or_else_expr","output","output","paren_expr","pat","print","print_stack","raise_expr","record_ty","recsel_expr","right_total","scan","scan_stack","scon_expr","scon_pat","seq_dec","size","space","space","space_indent","text","to_owned","to_owned","to_owned","to_owned","to_owned","token","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tuple_ty","ty","tydec","type_id","type_id","type_id","type_id","type_id","typed_expr","typed_pat","tyvar_ty","unit_expr","val","vid_expr","vid_pat","while_expr","wildcard_pat","zerobreak","blank_spaces","breaks","offset","overflow_indent"],"q":["pomelo_fmt","","","","","","","","","","","pomelo_fmt::buffer","","","","","","","","","","","","","","","","","","","","","","","pomelo_fmt::dec","pomelo_fmt::printer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_fmt::printer::Token","","",""],"d":["","","Buffer implementation for Oppen algorithm.","","","","Pretty print the AST.","","Oppen-style pretty printer.","","Utility functions for working with whitespace, comments, …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Determines formatting for a group.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Stack of pointers to the start of the current group in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spaces to insert if not a linebreak","Consistent or inconsistent breaking for this group","Indent for this group","Indent if we overflow onto a new line"],"i":[0,0,0,0,0,0,0,71,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,22,22,0,0,21,22,0,21,0,0,0,0,0,0,22,0,3,3,3,3,3,3,3,21,22,23,24,3,21,22,23,24,3,24,3,3,3,3,3,21,22,23,24,3,21,22,23,24,3,3,3,3,3,3,3,21,22,3,3,3,21,22,23,24,3,3,21,22,23,23,24,24,3,3,3,3,3,3,3,3,3,3,3,21,22,23,24,3,3,3,22,3,3,3,3,3,3,3,3,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,23,3,3,3,3,21,22,23,24,3,23,21,22,23,24,3,21,22,23,24,3,3,3,3,21,22,23,24,3,3,3,3,3,3,3,3,3,3,3,72,73,73,72],"f":[0,0,0,0,0,0,[1,2],[3,4],0,0,0,0,[[]],[[]],[5],[[[5,[6]]],[[5,[6]]]],[[]],[[[5,[7]],8],9],[[]],[[5,10]],[[5,10]],[[]],[5,11],[5,10],[5,4],[[],5],0,[5,4],[5,10],0,[[]],[[],12],[[],12],[[],13],[14,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,15],4],[[3,16,10]],[[3,10]],[3],[[3,17],4],[[3,18],4],[[3,19],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[3,20],4],[[3,16]],[[3,16]],[3],[21,21],[22,22],[23,23],[24,24],[3,3],[[]],[[]],[[]],[[]],[[]],[[3,25],4],[[3,26],4],[[3,27],4],[[3,28],4],[[3,14],4],[3],[[21,21],11],[[22,22],11],[[3,29],4],[[3,30],4],[[3,31],4],[[21,8],9],[[22,8],9],[[23,8],9],[[24,8],9],[[3,8],9],[[3,32],4],[[]],[[]],[[],23],[[]],[[]],[[],24],[[]],[[3,33],4],[[3,34],4],[[3,35],4],[[3,36],4],[[3,16]],[[3,37],4],[[3,38],4],[[3,39],4],[[3,10]],[3],[[]],[[]],[[]],[[]],[[]],[[3,40],4],0,[22,[[4,[10]]]],[[3,41],4],[3],[[3,42,42,42,11,43,10],4],[[3,44],4],0,[[3,45,11],4],[10,3],[[3,46],4],0,[[3,47],4],[[3,48],4],[3,2],0,[[3,49],4],[[3,50],4],[[3,22,16]],0,[[3,51],4],[[3,52],4],[[3,53],4],0,[[3,22]],0,[[3,54],4],[[3,55],4],[[3,56],4],0,[3],0,[3],[[3,[58,[[57,[42]]]]]],[[]],[[]],[[]],[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[3,59],4],[[3,60],4],[[3,61],4],[[],13],[[],13],[[],13],[[],13],[[],13],[[3,62],4],[[3,63],4],[[3,64],4],[[3,65],4],[[3,66],4],[[3,67],4],[[3,68],4],[[3,69],4],[[3,70],4],[3],0,0,0,0],"p":[[3,"SyntaxTree"],[3,"String"],[3,"Printer"],[4,"Option"],[3,"Buffer"],[8,"Clone"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"bool"],[4,"Result"],[3,"TypeId"],[4,"Dec"],[3,"AbstypeDec"],[15,"isize"],[3,"AndAlsoExpr"],[4,"AtomicExpr"],[4,"AtomicPat"],[3,"CaseExpr"],[4,"Breaks"],[4,"Token"],[3,"BufElt"],[3,"PrintStackEntry"],[3,"ConsOrInfixPat"],[3,"ConsTy"],[3,"DatatypeRepDec"],[3,"DatatypeDec"],[3,"ExceptionDec"],[4,"Expr"],[3,"ExprRow"],[3,"FnExpr"],[3,"FunDec"],[3,"FunTy"],[3,"HandleExpr"],[3,"IfExpr"],[3,"InfixDec"],[3,"InfixOrAppExpr"],[3,"InfixrDec"],[3,"LayeredPat"],[3,"LetExpr"],[15,"str"],[8,"Iterator"],[3,"LocalDec"],[3,"Match"],[3,"NonfixDec"],[3,"OpenDec"],[3,"OrElseExpr"],[3,"ParenExpr"],[4,"Pat"],[3,"RaiseExpr"],[3,"RecordTy"],[3,"RecSelExpr"],[3,"SConExpr"],[3,"SConPat"],[3,"SeqDec"],[4,"Cow"],[8,"Into"],[3,"TupleTy"],[4,"Ty"],[3,"TypeDec"],[3,"TypedExpr"],[3,"TypedPat"],[3,"TyVarTy"],[3,"UnitExpr"],[3,"ValDec"],[3,"VIdExpr"],[3,"VIdPat"],[3,"WhileExpr"],[3,"WildcardPat"],[8,"Printable"],[13,"Break"],[13,"Begin"]]},\
"pomelo_hir":{"doc":"High-level intermediate representation (HIR) for <code>pomelo</code>.","t":[4,3,13,13,3,8,8,3,3,13,13,8,13,4,13,12,10,11,11,10,11,10,11,10,11,10,11,10,11,0,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,10,11,11,10,11,10,11,11,10,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,0,0,12,11,11,11,11,11,11,11,0,5,12,12,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,17,17,17,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,13,13,3,13,3,13,4,4,4,13,3,3,4,4,13,3,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,3,13,4,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,3,13,4,3,3,13,13,13,13,13,3,13,13,13,13,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,4,3,3,3,13,13,13,13,13,4,13,13,13,13,3,13,13,4,13,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,16,8,8,16,0,0,0,10,0,10,11,10,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,16,8,5,5,5,10,10,5,10,10,10,5,5,5,5,8,17,5,5,10],"n":["AstId","AstIdMap","Dec","Expr","File","FileArena","FileArenaExt","FileArenaImpl","FileAstIdx","Generated","Missing","NameInterner","Node","NodeParent","Pat","_ph","alloc","alloc","alloc","alloc_ast_id","alloc_ast_id","alloc_dec","alloc_dec","alloc_expr","alloc_expr","alloc_pat","alloc_pat","alloc_ty","alloc_ty","arena","arena","arenas","arenas","arenas_mut","ast_map","backmap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtins","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decs","default","default","default","eq","eq","eq","eq","eq","eq","exprs","fmt","fmt","fmt","fmt","fmt","fmt","fresh","fresh","fresh_strid","fresh_tycon","fresh_tyvar","fresh_vid","from","from","from","from","from","from","from_dec","from_expr","from_pat","get","get","get","get_ast_id","get_ast_id","get_ast_span","get_ast_span","get_dec","get_dec","get_dec","get_dec_mut","get_dec_mut","get_expr","get_expr","get_expr","get_expr_mut","get_expr_mut","get_name","get_name","get_name","get_node","get_pat","get_pat","get_pat","get_pat_mut","get_pat_mut","get_span","get_ty","get_ty","get_ty","get_ty_mut","get_ty_mut","hir","identifiers","index","into","into","into","into","into","into","is_generated","lower","lower_ast_to_hir","name_interner","pats","pretty","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topdecs","topdecs","topdecs_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","tys","Arena","Idx","_ph","alloc","as_inner","borrow","borrow","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","from","from","get","get_mut","hash","inner","inner","into","into","items","items_mut","new","new","pretty","pretty","pretty","pretty","reserve","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","At","BUILTIN_INFIX","BUILTIN_TYCONS","BUILTIN_VALUES","Before","Bool","Builtin","Carat","Char","Cons","Div","Eq","Exn","False","Gtr","GtrEq","Ineq","Int","Less","LessEq","List","Minus","Mod","Nil","O","Plus","Real","Ref","RefAssign","Slash","Star","String","True","Unit","Word","as_str","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_string","hash","into","to_owned","try_from","try_into","type_id","Abstype","Application","Assignment","Builtin","Char","ConBind","Constructed","Constructed","DataBind","Datatype","Dec","Dec","DecKind","DefLoc","ExBind","Exception","ExpRow","Expr","ExprKind","Fixity","Fixity","FloatWrapper","Fn","Function","Handle","Infix","Infix","Int","Layered","Left","Let","Local","MRule","Missing","Missing","Missing","Missing","Missing","Missing","Name","Nonfix","Open","Pat","Pat","PatKind","PatRow","Pattern","Raise","Real","Record","Record","Record","Replication","Right","Scon","Scon","Scon","Seq","Seq","String","Ty","Ty","TyKind","TyRow","TypBind","Typed","Typed","VId","VId","Val","ValBind","Var","Wildcard","Wildcard","Word","_make_seq","abstype","application","ast_id","ast_id","ast_id","ast_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_tycon","bound_tycon","bound_tycons","bound_tycons","bound_vid","bound_vids","bound_vids","bound_vids","bound_vids","bound_vids","bound_vids","builtin_vid","check_row_arity","check_row_op","check_row_vid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conbinds","cons","cons","datatype","desugar_case","desugar_if","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exception","expr","expr","expr","fixity","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_expr","fn_ty","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate_app","generate_app","generate_infix","generate_infix","generated","generated","generated","generated","get_inner_iter","get_inner_iter","get_vid","get_vid","handle","hash","infix","infix","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kind","kind","kind","kind","kind","kind","kind","kind","label","label","layered","let_expr","local","lower","lower","lower","lower","lower","lower","lower","lower","lower","lower","lower","lower","lower","lower_abstype","lower_andalso","lower_atomic","lower_atomic","lower_case","lower_cons","lower_datatype","lower_exception","lower_fix","lower_fn","lower_fun","lower_fun","lower_fvalbind","lower_handle","lower_if","lower_infix","lower_infixr","lower_layered","lower_let","lower_list","lower_list","lower_local","lower_nonfix","lower_open","lower_orelse","lower_paren","lower_raise","lower_record","lower_record","lower_record","lower_recsel","lower_replication","lower_scon","lower_scon","lower_seq","lower_seq","lower_tuple","lower_tuple","lower_tuple","lower_type","lower_typed","lower_typed","lower_tyvar","lower_unit","lower_val","lower_vid","lower_vid","lower_while","make_fn_chain","make_fresh_vids_and_outer_pat","make_row_expr","make_row_pat","make_tuple","make_tuple","missing","missing","missing","missing","missing","missing","missing","missing","new","op","open","parent","parent","pat","pat","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","raise","rec","record","record","record","replication","scon","scon","seq","seq","to_kind","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","tycon","tycon","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed","typed","tyvar","tyvarseq","tyvarseq","val","vid","vid","vid","vid_builtin","wildcard","bindings","bindings","databinds","databinds","dec","decs","exbind","fixity","inner","lhs","longstrids","outer","rhs","tyvarseq","vids","lhs","op","op_lhs","op_rhs","rhs","ty","vid","dec","expr","expr","expr","expr","expr","exprs","lhs","longvid","match_","match_","op","param","rhs","rows","ty","vid","lhs","longvid","longvid","op","op","op","pat","pat","pat","rhs","rows","ty","ty","vid","vid","label","pat","domain","longtycon","range","tyrows","tyseq","BuiltIn","Generated","Label","LongStrId","LongTyCon","LongVId","Missing","Missing","Missing","Missing","Missing","Name","Name","Name","Name","Name","NameInternerImpl","Named","Numeric","StrId","String","TyCon","TyVar","VId","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fresh","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_builtin","from_builtin","from_builtin","from_builtin","from_node","from_node","from_node","from_opt_node","from_opt_node","from_string","from_string","from_string","from_string","from_string","from_token","from_token","from_token","from_token","from_token","generated","get","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","is_builtin","is_builtin","is_builtin","is_builtin","mapping","missing","missing","missing","missing","missing","missing","missing","names","numeric","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","pretty","strid","strid_path","strids","strids","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_builtin","try_builtin","try_builtin","try_builtin","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_name","try_into_name","try_into_name","try_into_vid","tycon","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vid","AstType","HirLower","HirLowerGenerated","Kind","context","dec","expr","generated","infix","lower","lower_opt","missing","pat","token","ty","util","LoweringCtxt","Resolver","ScopedMap","add_expr","add_pat","add_ty","alloc_ast_id","arenas","arenas_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","def_ty","def_vid","edits","enter_scope","enter_scope","errors","exit_scope","exit_scope","file","file_mut","fixity","fixup_vid_expr_ref","fmt","fmt","fmt","from","from","from","from_map","in_inner_scope","insert","interner_mut","into","into","into","lookup","lookup_fixity","lookup_ty","lookup_vid","lower_file","make_rec_dec","map","new","new","register_bound_tycons_dec","register_bound_vids_dec","register_fixities","register_pat_names_in_match","register_rec_pat","remove","res","resolver","resolver_mut","scope_stack","set_fixity","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","tys","values","FN_APPL","Node","ResolveExprOrPat","fix_infix","fix_infix_bp","fixity_to_bp","generate_app","generate_infix","get_bp","get_inner_iter","get_vid","parent","lower_list","lower_match","lower_tyvarseq","lower_vids","HirPrettyPrint","MISSING","boxed_seq","op_str","pretty"],"q":["pomelo_hirpomelo_hir::arena","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_hir::builtins","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_hir::hirpomelo_hir::hir::DecKind","","","","","","","","","","","","","","","pomelo_hir::hir::ExBind","","","","","","","pomelo_hir::hir::ExprKind","","","","","","","","","","","","","","","","","pomelo_hir::hir::PatKind","","","","","","","","","","","","","","","pomelo_hir::hir::PatRow","","pomelo_hir::hir::TyKind","","","","","pomelo_hir::identifierspomelo_hir::lower","","","","","","","","","","","","","","","","pomelo_hir::lower::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_hir::lower::infix","","","","","","","","","","","","pomelo_hir::lower::util","","","","pomelo_hir::pretty","","","",""],"d":["A pointer from the HIR node back to its corresponding AST …","Storage for links from the HIR back to the AST.","","","Represents a desugared top-level declaration and its …","Interface for navigating the HIR.","Interface for building the HIR.","","A pointer to an AST node.","","","Interface for interning and generating identifiers.","","Used to lookup the parent span of nodes that were …","","","","","","","","","","","","","","","","Basic index-based arena for holding HIR nodes.","","","","","","","","","","","","","","","","","","","Builtin names and symbols.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","FIXME: figure out how to properly handle text spans; this …","","","","","","Definition of the hir.","Representation of identifiers in the HIR.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Lowering from AST to HIR.","Obtain the HIR from the AST.","","","Pretty print HIR nodes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Basically a <code>Vec</code>.","An index into an <code>Arena</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This does not return an <code>Option</code> because we assume the index …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Built-in identifiers in the HIR.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Binding of a datatype constructor.","","","Binding of a new datatype.","","HIR declaration node.","","Kinds of HIR declarations.","Location where an identifier is bound.","Binding an exception.","","Record entry in an expression.","HIR expression node.","Kinds of HIR expressions.","Type of fixity, including whether it is left- or …","","Wrapper so we can derive <code>Eq</code> for <code>Scon</code>.","","","","","","","","","","","A rule in a match statement.","","","","","","","","","","HIR pattern node.","","Kinds of HIR expressions.","Record entry in a pattern.","","","","","","","","","HIR constant (literal).","","","","","","HIR type node.","","Kinds of HIR types.","Record entry in a type.","Binding of a type constructor.","","","","","","Binding of the names in a pattern to an expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Names bound by this pattern","Names bound by this pattern","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: this might need fixing, it doesn’t do anything …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns:","","","Other lowering stages need to make tuple pats","Other lowering stages need to make tuple patslabel in a record type.","A long (structure-qualified) structure identifier.","A long (structure-qualified) type constructor.","A long (structure-qualified) value identifier.","","","","","","An interned name in the HIR.","","","","","Holds information about identifiers in the HIR.","","","A structure identifier.","","A type constructor.","A type variable.","A value identifier.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lowering context.","","","","Resolve infix vs applicative expressions and patterns.","","","","","","","","Context needed while lowering.","Holds the results of early name resolution","Store names in scope and handle rollback when exiting an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Horrible hack to make while loop lowering work…","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","This is needed because some of the dec can have recursive …","","","","Register type constructors bound in the current <code>Dec</code>.","Register identifiers bound in the current <code>Dec</code>.","Register fixities bound in the current <code>Dec</code>.","Register identifiers declared in the the <code>Pat</code> of a pattern …","Register patterns in <code>val rec</code> declarations.","","","","","","","","","","","","","","","","","","","","","Maximum user-defined fixity is 9","","","","","","","","","","","","","","","","Interface for printing HIR nodes.","","","",""],"i":[0,0,16,16,0,0,0,0,0,15,15,0,15,0,16,8,4,5,6,143,5,143,5,143,5,143,5,143,5,0,6,13,13,13,5,6,13,5,6,15,8,16,13,5,6,15,8,16,0,13,5,6,15,8,16,13,5,6,15,8,16,5,13,5,6,13,5,6,15,8,16,5,13,5,6,15,8,16,4,5,4,4,4,4,13,5,6,15,8,16,16,16,16,4,5,6,143,5,143,5,144,13,5,143,5,144,13,5,143,5,144,13,5,15,144,13,5,143,5,6,144,13,5,143,5,0,0,8,13,5,6,15,8,16,15,0,0,5,5,0,13,5,6,15,8,16,13,13,13,13,5,6,15,8,16,13,5,6,15,8,16,13,5,6,15,8,16,5,0,0,3,38,3,3,38,3,38,38,3,38,3,38,38,3,38,3,38,3,38,38,38,3,3,38,3,38,38,38,3,38,3,3,3,3,38,3,38,3,38,3,38,3,38,41,0,0,0,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,50,46,51,54,0,49,58,0,42,0,51,0,0,0,42,0,0,0,0,42,0,50,58,50,50,49,54,49,53,50,42,0,51,42,50,54,49,58,46,53,42,0,51,0,0,57,50,54,50,49,58,42,53,0,50,49,42,50,54,0,42,0,0,0,50,49,50,49,42,0,58,49,57,54,9,9,10,9,10,11,12,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,43,45,9,42,46,9,42,48,45,11,49,10,48,48,48,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,45,11,12,9,10,10,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,9,48,56,60,9,51,9,42,48,43,45,52,46,53,10,50,54,55,55,56,11,49,57,12,58,59,60,10,12,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,10,11,10,11,9,10,11,12,10,11,10,11,10,51,10,11,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,9,10,11,12,9,10,11,12,56,59,11,10,9,9,48,43,45,52,10,54,56,11,57,12,59,60,9,10,10,11,10,12,9,9,9,10,9,12,48,10,10,9,9,11,10,10,11,9,9,9,10,10,10,10,11,12,10,9,10,11,9,10,10,11,12,9,10,11,12,10,9,10,11,10,48,48,48,48,10,11,9,9,10,10,11,11,12,12,55,52,9,10,11,48,60,9,48,43,45,52,46,10,54,56,11,57,12,59,60,10,48,10,11,12,9,10,11,9,10,10,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,55,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,9,43,52,59,43,45,51,9,42,48,43,45,52,46,53,10,50,54,55,56,11,49,57,12,58,59,60,10,11,12,43,45,9,10,11,52,11,11,145,146,147,148,148,149,150,151,152,153,154,152,153,145,151,155,156,155,155,155,156,156,157,157,158,159,160,161,162,163,164,160,165,164,158,163,166,159,163,167,168,169,168,169,170,169,171,170,167,172,171,170,167,170,173,173,174,175,174,176,175,122,122,0,0,0,0,27,24,26,25,124,0,27,24,26,25,0,124,124,0,122,0,0,0,121,121,122,47,27,123,24,26,44,25,124,121,122,47,27,123,24,26,44,25,124,121,122,47,27,123,24,26,44,25,124,121,122,47,27,123,24,26,44,25,124,121,121,122,47,27,123,24,26,44,25,124,121,122,47,27,123,24,26,44,25,124,121,121,122,47,47,47,27,27,123,123,24,24,26,44,44,25,25,124,122,27,24,25,47,123,44,47,44,122,27,24,26,25,27,24,26,25,124,121,121,122,47,27,24,44,25,121,122,47,27,123,24,26,44,25,124,47,27,44,25,121,47,27,24,26,44,25,124,121,124,122,47,27,123,24,26,44,25,124,123,123,47,44,121,122,47,27,123,24,26,44,25,124,122,27,24,25,121,122,47,27,123,24,26,44,25,124,121,122,47,27,123,24,26,44,25,124,27,24,25,47,44,121,122,47,27,123,24,26,44,25,124,47,177,0,0,178,0,0,0,178,0,177,177,177,0,0,0,0,0,0,0,28,28,28,28,28,28,28,133,134,28,133,134,28,133,134,28,133,134,133,133,134,133,134,28,133,134,28,28,133,28,28,133,134,28,133,134,134,28,134,28,28,133,134,134,133,133,133,28,28,134,28,133,28,28,28,28,28,134,28,28,28,134,133,28,133,134,28,133,134,28,133,134,28,133,134,133,133,0,139,0,0,0,0,139,139,0,139,139,139,0,0,0,0,0,0,0,0,179],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[[5,[4]],1],[[3,[2]]]],[6,[[8,[7]]]],[[],8],[[[5,[4]]],8],[9,[[3,[9]]]],[[[5,[4]],9],[[3,[9]]]],[10,[[3,[10]]]],[[[5,[4]],10],[[3,[10]]]],[11,[[3,[11]]]],[[[5,[4]],11],[[3,[11]]]],[12,[[3,[12]]]],[[[5,[4]],12],[[3,[12]]]],0,0,[13],0,[13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[13,13],[[[5,[14]]],[[5,[14]]]],[6,6],[[[15,[14]]],[[15,[14]]]],[8,8],[16,16],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],[[],[[5,[17]]]],[[],6],[[13,13],18],[[[5,[19]],5],18],[[6,6],18],[[[15,[19]],15],18],[[[8,[19]],8],18],[[16,16],18],0,[[13,20],21],[[[5,[22]],20],21],[[6,20],21],[[[15,[22]],20],21],[[[8,[22]],20],21],[[16,20],21],[[],23],[[[5,[4]]],23],[[],24],[[],25],[[],26],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[28,29],16],[[28,30],16],[[28,31],16],[[[3,[2]]],1],[[[5,[4]],[3,[2]]],1],[[6,[8,[7]]],[[33,[[32,[7]]]]]],[8,[[33,[32]]]],[[[5,[4]],8],[[33,[32]]]],[8,33],[[[5,[4]],8],33],[[[3,[9]]],9],[[13,[3,[9]]],9],[[[5,[4]],[3,[9]]],9],[[[3,[9]]],9],[[[5,[4]],[3,[9]]],9],[[[3,[10]]],10],[[13,[3,[10]]],10],[[[5,[4]],[3,[10]]],10],[[[3,[10]]],10],[[[5,[4]],[3,[10]]],10],[[[3,[2]]],1],[[13,[3,[2]]],1],[[[5,[4]],[3,[2]]],1],[[[15,[7]]],[[33,[[8,[7]]]]]],[[[3,[11]]],11],[[13,[3,[11]]],11],[[[5,[4]],[3,[11]]],11],[[[3,[11]]],11],[[[5,[4]],[3,[11]]],11],[[6,8],33],[[[3,[12]]],12],[[13,[3,[12]]],12],[[[5,[4]],[3,[12]]],12],[[[3,[12]]],12],[[[5,[4]],[3,[12]]],12],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[7]]],18],0,[34],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13],0,[13,35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],0,0,0,0,[38,3],[3,39],[[]],[[]],[[]],[[]],[38,39],[3,3],[[[38,[14]]],[[38,[14]]]],[[]],[[]],[[],38],[[3,3],18],[[[38,[19]],38],18],[[[3,[22]],20],21],[[[38,[22]],20],21],[[]],[[]],[[38,3]],[[38,3]],[3],0,0,[[]],[[]],[38,40],[38,40],[39,3],[[],38],[[[3,[11]]],2],[[[3,[10]]],2],[[[3,[9]]],2],[[[3,[12]]],2],[[38,39]],[[]],[[]],[[],36],[[],36],[[],36],[[],36],[[],37],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[41,1],[[]],[[]],[41,41],[[]],[[41,41],18],[[41,20],21],[[]],[1,[[33,[41]]]],[41],[[]],[[]],[[],36],[[],36],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,16,[35,[42]]],42],[9,33],[10,33],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,44],[45,44],[9,[[35,[44]]]],[42,[[35,[44]]]],[46,47],[9,[[35,[47]]]],[42,[[35,[47]]]],[48,[[35,[47]]]],[45,[[35,[47]]]],[11,[[35,[47]]]],[49,[[35,[47]]]],[41,50],[[33,39]],[[33,18]],[[33,27]],[51,51],[9,9],[42,42],[48,48],[43,43],[45,45],[52,52],[46,46],[53,53],[10,10],[50,50],[54,54],[55,55],[56,56],[11,11],[49,49],[57,57],[12,12],[58,58],[59,59],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[11,33],[12,33],[9,33],[[28,16,[3,[10]],61],50],[[28,16,[3,[10]],[3,[10]],[3,[10]]],50],[[51,51],18],[[9,9],18],[[42,42],18],[[48,48],18],[[43,43],18],[[45,45],18],[[52,52],18],[[46,46],18],[[53,53],18],[[10,10],18],[[50,50],18],[[54,54],18],[[55,55],18],[[56,56],18],[[11,11],18],[[49,49],18],[[57,57],18],[[12,12],18],[[58,58],18],[[59,59],18],[[60,60],18],[9,[[33,[46]]]],0,0,0,[9,33],[[51,20],21],[[9,20],21],[[42,20],21],[[48,20],21],[[43,20],21],[[45,20],21],[[52,20],21],[[46,20],21],[[53,20],21],[[10,20],21],[[50,20],21],[[54,20],21],[[55,20],21],[[55,20],21],[[56,20],21],[[11,20],21],[[49,20],21],[[57,20],21],[[12,20],21],[[58,20],21],[[59,20],21],[[60,20],21],[10,33],[12,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,16,[3,[10]],[3,[10]]],[[3,[10]]]],[[28,16,[3,[11]],[3,[11]]],[[3,[11]]]],[[28,16,[3,[10]],[3,[10]]],[[3,[10]]]],[[28,16,[3,[11]],[3,[11]]],[[3,[11]]]],[[28,16],[[3,[9]]]],[[28,16],[[3,[10]]]],[[28,16],[[3,[11]]]],[[28,16],[[3,[12]]]],[[],[[61,[40]]]],[[],[[61,[40]]]],[28,[[33,[47]]]],[28,[[33,[47]]]],[10,33],[51],[10,33],[11,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,42],[10,50],[11,49],[12,58],0,0,0,0,0,0,[11,33],[10,33],[9,33],[28,[[3,[9]]]],[[28,62,[3,[9]]],48],[[28,63],43],[[28,64],45],[[28,65],52],[28,[[3,[10]]]],[66,54],[[28,67],56],[28,[[3,[11]]]],[[28,68],57],[28,[[3,[12]]]],[[28,69],59],[[28,70],60],[[28,71],42],[[28,72],50],[[28,73],50],[[28,74],49],[[28,75],50],[[28,76],58],[[28,77],42],[[28,78],42],[[28,40,[33,[79]],80],42],[[28,81],50],[[28,82,[3,[9]]],42],[[28,83],58],[[28,16,84,[3,[9]]],48],[[28,85],50],[[28,86],50],[[28,87],42],[[28,88],42],[[28,89],49],[[28,90],50],[[28,91],50],[[28,92],49],[[28,93],42],[[28,94],42],[[28,95],42],[[28,96],50],[[28,97],50],[[28,98],50],[[28,99],50],[[28,100],49],[[28,101],58],[[28,102],50],[[28,103],42],[[28,104],50],[[28,105],49],[[28,106],42],[[28,107],50],[[28,108],50],[[28,109],49],[[28,110],58],[[28,111],42],[[28,112],50],[[28,113],49],[[28,114],58],[[],50],[[28,115,[3,[9]]],42],[[28,116],50],[[28,117],49],[[28,118],50],[[28,16,[35,[[3,[11]]]],[3,[10]]],[[3,[10]]]],[[28,16,39]],[[28,16,119],[[3,[10]]]],[[28,16,119,39],[[3,[11]]]],[40,50],[40,49],[9,18],[28,[[3,[9]]]],[28,[[3,[10]]]],[10,18],[28,[[3,[11]]]],[11,18],[12,18],[28,[[3,[12]]]],[120,55],0,[9,33],[28,16],[28,16],0,0,[9,2],[48,2],[43,2],[45,2],[52,2],[46,2],[10,2],[54,2],[56,2],[11,2],[57,2],[12,2],[59,2],[60,2],[10,[[33,[[3,[10]]]]]],0,[10,33],[11,33],[12,33],[9,33],[10,[[33,[54]]]],[11,[[33,[54]]]],[9,33],[10,33],[[28,30],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[9,33],0,0,0,0,0,[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[10,33],[11,33],[12,[[33,[26]]]],0,0,[9,33],[10,33],[11,33],0,[41,49],[11,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[121,1],[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,121],[122,122],[47,47],[27,27],[123,123],[24,24],[26,26],[44,44],[25,25],[124,124],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],121],[[121,121],18],[[122,122],18],[[47,47],18],[[27,27],18],[[123,123],18],[[24,24],18],[[26,26],18],[[44,44],18],[[25,25],18],[[124,124],18],[[121,20],21],[[122,20],21],[[47,20],21],[[27,20],21],[[123,20],21],[[24,20],21],[[26,20],21],[[44,20],21],[[25,20],21],[[124,20],21],[121,23],[[]],[[]],[27,47],[41,47],[[]],[41,27],[[]],[24,123],[[]],[41,24],[[]],[[]],[[]],[25,44],[41,25],[[]],[[]],[41,122],[41,27],[41,24],[41,25],[[28,125],47],[[28,126],123],[[28,127],44],[[28,[33,[125]]],47],[[28,[33,[127]]],44],[1,122],[1,27],[1,24],[1,26],[1,25],[[28,[33,[128]]],27],[[28,[33,[129]]],24],[[28,[33,[130]]],26],[[28,[33,[131]]],25],[[28,[33,[132]]],124],0,[[121,[3,[2]]],1],[122],[47],[27],[24],[44],[25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,18],[27,18],[44,18],[25,18],0,[[],47],[[],27],[[],24],[[],26],[[],44],[[],25],[[],124],0,[23,124],[122,2],[47,2],[27,2],[123,2],[24,2],[26,2],[44,2],[25,2],[124,2],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,122],[1,27],[1,24],[1,25],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[27,[[33,[122]]]],[24,[[33,[122]]]],[25,[[33,[122]]]],[47,[[33,[27]]]],0,[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],0,0,0,0,0,0,0,0,[[28,16],3],0,[28,3],[[28,33],3],[28,3],0,0,0,0,0,0,0,[[28,10],[[3,[10]]]],[[28,11],[[3,[11]]]],[[28,12],[[3,[12]]]],[28,8],[28],[28],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[133,133],[[[134,[14,14]]],[[134,[14,14]]]],[[]],[[]],[[]],[[133,44,51]],[[133,47,51]],0,[133],[134],0,[133],[134],0,[28,13],0,[[28,[3,[10]],51]],[[28,20],21],[[133,20],21],[[[134,[22,22]],20],21],[[]],[[]],[[]],[135,134],[[28,136]],[134,33],[28],[[]],[[]],[[]],[134,33],[[133,47],[[33,[53]]]],[[133,44],51],[[133,47],51],[[28,137]],[[28,[15,[29]],138],[[3,[9]]]],0,[[],28],[[],133],[[28,[3,[9]]]],[[28,[3,[9]]]],[[28,[3,[9]]]],[[28,[3,[11]]]],[[28,[3,[11]],[3,[9]]]],[134],0,[28,133],[28,133],0,[[133,47,53]],[[]],[[]],[[]],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],37],[[],37],[[],37],0,0,0,0,0,[28,[[3,[139]]]],[[28,16,140,141],[[3,[139]]]],[53],[[28,16,3,3],3],[[28,16,3,3],3],[28,33],[[],[[61,[40]]]],[28,[[33,[47]]]],[28,16],[[28,16,40,80,80]],[[28,142],61],[[28,40],61],[[28,40],61],0,0,[40,[[35,[2]]]],[18,1],[[],2]],"p":[[15,"str"],[3,"String"],[3,"Idx"],[8,"NameInterner"],[3,"FileArenaImpl"],[3,"AstIdMap"],[8,"AstNode"],[3,"FileAstIdx"],[3,"Dec"],[3,"Expr"],[3,"Pat"],[3,"Ty"],[3,"File"],[8,"Clone"],[4,"AstId"],[4,"NodeParent"],[8,"Default"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u32"],[4,"StrId"],[4,"TyCon"],[4,"TyVar"],[4,"VId"],[3,"LoweringCtxt"],[4,"Dec"],[4,"Expr"],[4,"Pat"],[6,"AstPtr"],[4,"Option"],[3,"SyntaxTree"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Arena"],[15,"usize"],[8,"Iterator"],[4,"Builtin"],[4,"DecKind"],[3,"TypBind"],[3,"LongTyCon"],[3,"DataBind"],[4,"ExBind"],[3,"LongVId"],[3,"ValBind"],[4,"PatKind"],[4,"ExprKind"],[4,"DefLoc"],[3,"ConBind"],[4,"Fixity"],[4,"Scon"],[3,"FloatWrapper"],[3,"ExpRow"],[4,"PatRow"],[4,"TyKind"],[3,"TyRow"],[3,"MRule"],[3,"Box"],[3,"ValBind"],[3,"TyBind"],[3,"DataBind"],[3,"ConBind"],[4,"Scon"],[3,"ExprRow"],[3,"PatRow"],[3,"TyRow"],[3,"Mrule"],[3,"AbstypeDec"],[3,"AndAlsoExpr"],[4,"AtomicExpr"],[4,"AtomicPat"],[3,"CaseExpr"],[3,"ConsTy"],[3,"DatatypeDec"],[3,"ExceptionDec"],[3,"Fixity"],[8,"Fn"],[3,"FnExpr"],[3,"FunDec"],[3,"FunTy"],[3,"FvalBind"],[3,"HandleExpr"],[3,"IfExpr"],[3,"InfixDec"],[3,"InfixrDec"],[3,"LayeredPat"],[3,"LetExpr"],[3,"ListExpr"],[3,"ListPat"],[3,"LocalDec"],[3,"NonfixDec"],[3,"OpenDec"],[3,"OrElseExpr"],[3,"ParenExpr"],[3,"RaiseExpr"],[3,"RecordExpr"],[3,"RecordPat"],[3,"RecordTy"],[3,"RecSelExpr"],[3,"DatatypeRepDec"],[3,"SConExpr"],[3,"SConPat"],[3,"SeqDec"],[3,"SeqExpr"],[3,"TupleExpr"],[3,"TuplePat"],[3,"TupleTy"],[3,"TypeDec"],[3,"TypedExpr"],[3,"TypedPat"],[3,"TyVarTy"],[3,"ValDec"],[3,"VIdExpr"],[3,"VIdPat"],[3,"WhileExpr"],[3,"FvalBindRow"],[15,"f64"],[3,"NameInternerImpl"],[4,"Name"],[3,"LongStrId"],[4,"Label"],[3,"LongVId"],[3,"LongStrId"],[3,"LongTyCon"],[3,"VId"],[3,"StrId"],[3,"TyVar"],[3,"TyCon"],[3,"Label"],[3,"Resolver"],[3,"ScopedMap"],[3,"HashMap"],[8,"FnMut"],[3,"File"],[8,"FnOnce"],[8,"ResolveExprOrPat"],[3,"Peekable"],[15,"u8"],[3,"Match"],[8,"FileArenaExt"],[8,"FileArena"],[13,"Val"],[13,"Ty"],[13,"Datatype"],[13,"Abstype"],[13,"Seq"],[13,"Exception"],[13,"Fixity"],[13,"Local"],[13,"Replication"],[13,"Open"],[13,"Assignment"],[13,"Name"],[13,"Let"],[13,"Application"],[13,"Typed"],[13,"Handle"],[13,"Raise"],[13,"Seq"],[13,"Infix"],[13,"VId"],[13,"Fn"],[13,"Record"],[13,"Infix"],[13,"VId"],[13,"Constructed"],[13,"Layered"],[13,"Typed"],[13,"Record"],[13,"Pattern"],[13,"Function"],[13,"Constructed"],[13,"Record"],[8,"HirLower"],[8,"HirLowerGenerated"],[8,"HirPrettyPrint"]]},\
"pomelo_lex":{"doc":"A basic lexer for SML ’97.","t":[2,2,3,11,11,11,11,0,11,11,12,11,5,5,5,5,5,5,5,11,11,11,0,12,11,11,11,3,17,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,12,12],"n":["LexKind","LexToken","LexedStr","borrow","borrow_mut","clone","clone_into","cursor","fmt","from","input","into","is_ident_alpha_cont","is_ident_alpha_start","is_ident_symb","is_number_start","is_reserved_symbol_start","is_whitespace","lex","lex","new","to_owned","token","tokens","try_from","try_into","type_id","Cursor","EOF_CHAR","arrow","borrow","borrow_mut","bump","chars","clone","clone_into","comment","decimal_or_real","eat_while","ellipsis","exponent","first","fmt","from","hexadecimal","ident_alpha","ident_symb","initial_len","into","is_eof","len_consumed","literal_char","literal_string","new","next_token","number","number_negation","reset_len_consumed","second","to_owned","try_from","try_into","type_id","whitespace","word","Char","Colon","Comma","Comment","Dot","Ellipsis","Eq","Hash","Ident","Int","LBrace","LBracket","LParen","LexKind","LexToken","Pipe","RBrace","RBracket","RParen","Real","Semicolon","String","ThickArrow","ThinArrow","Underscore","Unknown","Whitespace","Word","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_char","hash","hash","into","into","is_empty","kind","kind","len","len","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","terminated","terminated","terminated"],"q":["pomelo_lex","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_lex::cursor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_lex::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_lex::token::LexKind","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Convert the input <code>src</code> to a sequence of tokens.","","","","Lexical tokens and their kinds","","","","","Handles peeking and consuming characters from the source, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","An char constant (e.g., <code>#&quot;a&quot;</code>).","<code>:</code>","<code>,</code>","Example: “(* this is a comment *)”.","<code>.</code>","<code>...</code>","<code>=</code>","<code>#</code>","Keyword or (symbolic or alphanumeric) identifier.","An integer constant (decimal or hexadecimal).","<code>{</code>","<code>[</code>","<code>(</code>","Kinds of lexical tokens.","A token is represented by a <code>LexKind</code> and a length of source …","<code>|</code>","<code>}</code>","<code>]</code>","<code>)</code>","An real constant (with possible exponential part).","<code>;</code>","An string constant (e.g., <code>&quot;abc&quot;</code>).","<code>=&gt;</code>","<code>-&gt;</code>","<code>_</code>","Unknown character.","Any non-empty sequence of whitespace chars.","An unsigned constant (decimal or hexadecimal).","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>Some(kind)</code> if <code>c</code> matches a single character token, …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,7,12,7,12,7,12,7,12,7,12,7,12,7,12,12,7,12,7,7,7,7,7,7,7,12,7,12,7,12,7,12,7,16,17,18],"f":[0,0,0,[[]],[[]],[1,1],[[]],0,[[1,2],3],[[]],0,[[]],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[6,[[8,[7]]]],[1,[[8,[7]]]],[6,1],[[]],0,0,[[],9],[[],9],[[],10],0,0,[[11,4],12],[[]],[[]],[11,[[13,[4]]]],0,[11,11],[[]],[11,12],[11,12],[[11,14]],[11,12],[11,12],[11,4],[[11,2],3],[[]],[11,12],[11,12],[11,12],0,[[]],[11,5],[11,15],[11,12],[11,12],[6,11],[11,7],[[11,4],12],[11,12],[11],[11,4],[[]],[[],9],[[],9],[[],10],[11,12],[11,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[12,12],[7,7],[[]],[[]],[[12,12],5],[[7,7],5],[[12,2],3],[[7,2],3],[[]],[[]],[4,[[13,[12]]]],[12],[7],[[]],[[]],[7,5],[7,12],0,[7,15],0,[[15,12],7],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0],"p":[[3,"LexedStr"],[3,"Formatter"],[6,"Result"],[15,"char"],[15,"bool"],[15,"str"],[3,"LexToken"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Cursor"],[4,"LexKind"],[4,"Option"],[8,"FnMut"],[15,"usize"],[13,"Comment"],[13,"Char"],[13,"String"]]},\
"pomelo_parse":{"doc":"Parser for SML ’97.","t":[13,13,13,13,13,13,13,8,2,2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,16,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,11,11,12,10,10,11,11,11,11,12,11,12,12,11,11,11,0,14,14,14,11,0,12,11,12,5,0,0,12,11,0,10,12,11,11,12,11,11,11,8,6,8,3,16,0,11,11,10,11,10,10,11,11,11,11,11,0,0,11,11,0,11,11,11,11,0,11,0,0,0,10,10,11,12,11,11,11,11,0,11,0,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,13,3,4,13,3,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,4,13,3,4,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,13,4,13,3,13,3,13,3,4,3,13,3,13,3,13,3,13,3,13,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,13,3,13,3,13,3,13,3,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ABSTYPE_DEC","ABSTYPE_KW","ACCESSOR_EXP","ANDALSO_EXP","ANDALSO_KW","AND_KW","AS_KW","AstNode","AstPtr","AstToken","CASE_KW","CASE_MATCH_EXP","CHAR","COLON","COMMA","COMMENT","CON_BIND","CON_TY","DATATYPE_DEC","DATATYPE_KW","DATATYPE_REP","DATA_BIND","DERIV_EXP","DERIV_PAT","DOT","DO_KW","ELLIPSIS","ELSE_KW","END_KW","EOF","EQ","ERROR","EXCEPTION_KW","EXCEPT_DEC","EXP_ROW","EX_BIND","EX_BIND_EQ","EX_BIND_NOEQ","Error","FILE","FIXITY","FN_EXP","FN_KW","FUN_DEC","FUN_KW","FUN_TY","FVAL_BIND","FVAL_BIND_ROW","HANDLE_EXP","HANDLE_KW","HASH","IDENT","IF_EXP","IF_KW","INFIXR_DEC","INFIXR_KW","INFIX_DEC","INFIX_KW","INFIX_OR_APP_EXP","INFIX_OR_APP_PAT","INT","IN_KW","LAB","LAB_AS_VAR_AS_PAT","LAB_AS_VAR_PAT","LAB_AS_VAR_TY","LAYERED_PAT","LET_EXP","LET_KW","LIST_EXP","LIST_PAT","LOCAL_DEC","LOCAL_KW","LONG_STRID","LONG_TY_CON","LONG_VID","L_BRACE","L_BRACKET","L_PAREN","Language","MATCH","MRULE","NONFIX_DEC","NONFIX_KW","OF_KW","OPEN_DEC","OPEN_KW","OP_KW","ORELSE_EXP","ORELSE_KW","PAREN_EXP","PAT_ROW","PAT_ROW_PAT","PIPE","Parser","RAISE_EXP","RAISE_KW","REAL","RECORD_EXP","RECORD_PAT","RECORD_SEL_EXP","RECORD_TY","REC_KW","R_BRACE","R_BRACKET","R_PAREN","SCON_EXP","SCON_PAT","SEMICOLON","SEQ_DEC","SEQ_EXP","STAR","STRID","STRING","SyntaxKind","SyntaxTree","THEN_KW","THICK_ARROW","THIN_ARROW","TUPLE_EXP","TUPLE_PAT","TUPLE_TY_EXP","TY","TYPE_KW","TYVAR","TYVAR_TY","TY_BIND","TY_CON","TY_DEC","TY_EXP","TY_PAT","TY_ROW","UNDERSCORE","UNIT_EXP","UNIT_PAT","UNKNOWN","VAL_BIND","VAL_DEC","VAL_KW","VID","VID_EXP","VID_PAT","WHILE_EXP","WHILE_KW","WHITESPACE","WILDCARD_PAT","WITHTYPE_KW","WITH_KW","WORD","ast","borrow","borrow_mut","builder","can_cast","cast","clone","clone_for_update","clone_into","clone_subtree","current_pos","eq","errors","errors","fmt","fmt","from","grammar","impl_ast_node","impl_ast_token","impl_from","into","language","msg","new","node","parse","parser","passes","pos","provide","syntax","syntax","text","to_owned","to_string","tokens","try_from","try_into","type_id","AstNode","AstPtr","AstToken","File","Language","bindings","borrow","borrow_mut","can_cast","can_cast","cast","cast","cast","clone","clone_for_update","clone_into","clone_subtree","constants","declarations","declarations","eq","expressions","fmt","fmt","from","hash","identifiers","into","matches","patterns","support","syntax","syntax","syntax","syntax","to_owned","to_string","try_from","try_into","type_expressions","type_id","util","ConBind","DataBind","ExBind","FvalBind","FvalBindRow","TyBind","ValBind","atpats","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conbinds","eq","eq","eq","eq","eq","eq","eq","eq","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","longvid","op","op","pat","rec","rows","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","tycon","tycon","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tyvarseq","tyvarseq","vid","vid","vid","Char","Int","Real","Scon","String","Word","borrow","borrow_mut","cast","clone","clone_into","eq","fmt","from","hash","into","syntax","to_owned","try_from","try_into","type_id","Abstype","AbstypeDec","Datatype","DatatypeDec","DatatypeRep","DatatypeRepDec","Dec","Exception","ExceptionDec","Fixity","Fun","FunDec","Infix","InfixDec","Infixr","InfixrDec","Local","LocalDec","Nonfix","NonfixDec","Open","OpenDec","Seq","SeqDec","Type","TypeDec","Val","ValDec","bindings","bindings","bindings","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","databinds","databinds","dec","dec1","dec2","declarations","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fixity","fixity","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","longstrids","longtycon","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tycon","typbind","typbind","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tyvarseq","tyvarseq","value","vids","vids","vids","withtype","withtype","AndAlso","AndAlsoExpr","Atomic","AtomicExpr","Case","CaseExpr","Expr","ExprRow","Fn","FnExpr","Handle","HandleExpr","If","IfExpr","InfixOrApp","InfixOrAppExpr","Let","LetExpr","List","ListExpr","OrElse","OrElseExpr","Paren","ParenExpr","Raise","RaiseExpr","RecSel","RecSelExpr","Record","RecordExpr","SCon","SConExpr","Seq","SeqExpr","Tuple","TupleExpr","Typed","TypedExpr","Unit","UnitExpr","VId","VIdExpr","While","WhileExpr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dec","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expr","expr","expr","expr","expr","expr","expr","expr_1","expr_1","expr_1","expr_1","expr_2","expr_2","expr_2","expr_2","expr_3","exprows","exprs","exprs","exprs","exprs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","label","label","longvid","match_expr","match_expr","match_expr","op","scon","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Label","LongStrId","LongTyCon","LongVId","StrId","TyCon","TyVar","VId","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","strids","strids","strids","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tycon","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vid","Match","Mrule","borrow","borrow","borrow_mut","borrow_mut","can_cast","can_cast","cast","cast","clone","clone","clone_into","clone_into","eq","eq","expr","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","mrules","pat","syntax","syntax","syntax","syntax","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Atomic","AtomicPat","ConsOrInfix","ConsOrInfixPat","Layered","LayeredPat","List","ListPat","Pat","PatRow","Record","RecordPat","SCon","SConPat","Tuple","TuplePat","Typed","TypedPat","Unit","UnitPat","VId","VIdPat","Wildcard","WildcardPat","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","label","longvid","op","pat","pat","patrows","pats","pats","pats","pats","scon","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","child","children","token","tokens","Cons","ConsTy","Fun","FunTy","Record","RecordTy","Tuple","TupleTy","Ty","TyRow","TyVar","TyVarTy","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","can_cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","label","longtycon","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","syntax","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty_1","ty_2","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tyrows","tys","tys","tyvar","bindings","combinators","declarations","expressions","identifiers","matches","patterns","source_file","type_expressions","conbind","conbind_inner","databind","exbind","fvalbind","fvalbind_row","typbind","valbind","descend_flat","descend_once","descend_right","sequential","abstype_declaration","datatype_declaration","declaration","declaration_inner","exception_declaration","fun_declaration","infix_or_nonfix","local_declaration","open_declaration","type_declaration","val_declaration","andalso_expr","appexp","atomic_inner","case_match","expr_bp","expression","exprow","finish_seq_expression","finish_tuple_expression","fn_match","handle_expr","if_exp","infix_bp","infix_or_app_expr","let_dec","listexp","orelse_expr","other_parenthesized","postfix_bp","raise_exp","record_exp","ty_expr","vid_exp","while_exp","label","longstrid","longvid","strid","vid","match_exp","mrule","atomic_in_pat","atomic_pattern","infixed_pat","label_as_variable","layered_pat","list_pat","other_paren_pat","parenthesized_pat","patrow","patrow_inner","pattern","pattern_row","pattern_row_or_label_as_var","record_pat","typed_pat","wildcard_patrow","fun_ty","longtycon","non_star_ident","peek_star_ident","record_ty","tuple_ty","ty","ty_atom","tycon","tycon_seq","tyrow","tyvarseq","SML","SyntaxElement","SyntaxElementChildren","SyntaxNode","SyntaxNodeChildren","SyntaxNodePtr","SyntaxToken","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","hash","into","kind_from_raw","kind_to_raw","partial_cmp","to_owned","try_from","try_into","type_id","Checkpoint","NodeBuilder","NodeGuard","Parser","SyntaxTree","Token","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","checkpoint","checkpoint","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","current_pos","drop","eat","eat_any","eat_mapped","eat_through_trivia","eat_trivia","eq","eq","error","errors","errors","errors","expect","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_lex_token","has_errors","hash","into","into","into","into","into","into","into_parts","is_eof","is_strid","is_vid","kind","kind","new","new","new","new","next_nontrivia_is_vid","node","node","parse","parse_dec","parse_expr","parse_inner","parse_pat","parse_type","partial_cmp","peek","peek_next_nontrivia","peek_nth","peek_text","peek_token","peek_token_next_nontrivia","pop","push_token","push_token","start_node","start_node","start_node_at","start_node_at","syntax","text","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","apply_passes","ABSTYPE_DEC","ABSTYPE_KW","ACCESSOR_EXP","ANDALSO_EXP","ANDALSO_KW","AND_KW","AS_KW","CASE_KW","CASE_MATCH_EXP","CHAR","COLON","COMMA","COMMENT","CON_BIND","CON_TY","DATATYPE_DEC","DATATYPE_KW","DATATYPE_REP","DATA_BIND","DERIV_EXP","DERIV_PAT","DOT","DO_KW","ELLIPSIS","ELSE_KW","END_KW","EOF","EQ","ERROR","EXCEPTION_KW","EXCEPT_DEC","EXP_ROW","EX_BIND","EX_BIND_EQ","EX_BIND_NOEQ","FILE","FIXITY","FN_EXP","FN_KW","FUN_DEC","FUN_KW","FUN_TY","FVAL_BIND","FVAL_BIND_ROW","HANDLE_EXP","HANDLE_KW","HASH","IDENT","IF_EXP","IF_KW","INFIXR_DEC","INFIXR_KW","INFIX_DEC","INFIX_KW","INFIX_OR_APP_EXP","INFIX_OR_APP_PAT","INT","IN_KW","LAB","LAB_AS_VAR_AS_PAT","LAB_AS_VAR_PAT","LAB_AS_VAR_TY","LAYERED_PAT","LET_EXP","LET_KW","LIST_EXP","LIST_PAT","LOCAL_DEC","LOCAL_KW","LONG_STRID","LONG_TY_CON","LONG_VID","L_BRACE","L_BRACKET","L_PAREN","MATCH","MRULE","NONFIX_DEC","NONFIX_KW","OF_KW","OPEN_DEC","OPEN_KW","OP_KW","ORELSE_EXP","ORELSE_KW","PAREN_EXP","PAT_ROW","PAT_ROW_PAT","PIPE","RAISE_EXP","RAISE_KW","REAL","RECORD_EXP","RECORD_PAT","RECORD_SEL_EXP","RECORD_TY","REC_KW","R_BRACE","R_BRACKET","R_PAREN","SCON_EXP","SCON_PAT","SEMICOLON","SEQ_DEC","SEQ_EXP","STAR","STRID","STRING","SyntaxKind","THEN_KW","THICK_ARROW","THIN_ARROW","TUPLE_EXP","TUPLE_PAT","TUPLE_TY_EXP","TY","TYPE_KW","TYVAR","TYVAR_TY","TY_BIND","TY_CON","TY_DEC","TY_EXP","TY_PAT","TY_ROW","UNDERSCORE","UNIT_EXP","UNIT_PAT","UNKNOWN","VAL_BIND","VAL_DEC","VAL_KW","VID","VID_EXP","VID_PAT","WHILE_EXP","WHILE_KW","WHITESPACE","WILDCARD_PAT","WITHTYPE_KW","WITH_KW","WORD","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from_keyword","from_lexed","from_symbol","hash","into","is_atomic_exp_start","is_atomic_pat_start","is_dec_kw","is_kw","is_special_constant","is_trivia","is_ty_atom","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["pomelo_parsepomelo_parse::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::bindings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::constants","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::declarationspomelo_parse::ast::expressionspomelo_parse::ast::identifiers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::matches","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::patterns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::ast::support","","","","pomelo_parse::ast::type_expressions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::grammar","","","","","","","","","pomelo_parse::grammar::bindings","","","","","","","","pomelo_parse::grammar::combinators","","","","pomelo_parse::grammar::declarations","","","","","","","","","","","pomelo_parse::grammar::expressions","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::grammar::identifiers","","","","","pomelo_parse::grammar::matches","","pomelo_parse::grammar::patterns","","","","","","","","","","","","","","","","pomelo_parse::grammar::type_expressions","","","","","","","","","","","","pomelo_parse::language","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pomelo_parse::passes","pomelo_parse::syntaxd":["","","","","","","","The main trait to go from untyped <code>SyntaxNode</code> to a typed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An parsing error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The main interface for manipulating the lexed source.","","","","","","","","","","","","","","","","","","","","Kinds of syntax nodes in the Core SML language.","Output of the parsing stage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Representation of the AST.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Functions to parse the SML Core language.","","","","Calls <code>U::from(self)</code>.","Boilerplate for making the <code>rowan</code> stuff work.","","","","Lex and parse an input string.","Defines the parse tokens, parser interface, and output …","Validation passes to run after the AST is constructed.","","","Kinds of syntax nodes.","","","","","Tokens are stored in reverse order","","","","The main trait to go from untyped <code>SyntaxNode</code> to a typed …","","","","","AST nodes for bindings.","","","","","","","","","","","","AST nodes for constants (literals).","AST nodes for declarations.","","","AST nodes for expressions.","","","Returns the argument unchanged.","","AST nodes for identifiers.","Calls <code>U::from(self)</code>.","AST nodes for matches.","AST nodes for patterns.","","","","","","","","","","AST nodes for types and type expressions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions to parse bindings.","Utilities for combining parsers.","Functions to parse declarations.","Functions to parse expressions.","Functions to parse identifiers.","Functions to parse matches.","Functions to parse patterns.","Parse an entire source file.","Functions to parse types.","","","","","","","","","outer_node_kind: e.g. EXP inner_node_kind: e.g., ORELSE_EXP","outer_node_kind: e.g. EXP inner_node_kind: e.g., ORELSE_EXP","outer_node_kind: e.g. EXP inner_node_kind: e.g., ORELSE_EXP","This function does not eat trailing trivia","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Similar to infix expressions, we don’t have enough …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A wrapper for <code>rowan::Checkpoint</code>.","A wrapper for <code>rowan::GreenNodeBuilder</code>.","A guard to avoid forgetting to call <code>builder.finish_node()</code>.","The main interface for manipulating the lexed source.","Output of the parsing stage.","A parsed token.","","","","","","","","","","","","","","","Set a checkpoint that can be used later to create a node …","","","","","","","","","","","","","","","","","If <code>kind</code> matches the next token kind, consumes the token …","Consume the next token, regardless of its kind.","Consume the next token but remap its <code>SyntaxKind</code> to be <code>kind</code>.","If the next nontrivia token matches <code>kind</code>, consume it (and …","While the next token is trivia, consume it.","","","Append a new error to the stored list of errors.","","","","Consume the next token if it matches <code>kind</code>, else generate …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Check if the current token is a valid StrId.","Check if the current token is a valid VId.","","","","","","","Check if the current token is a valid VId.","","","Parse an entire source file.","Parse a single declaration.","Parse a single expression.","Parse according to a specified parsing function <code>f</code>.","Parse a single pattern.","Parse a single type.","","Peek at the kind of the next token.","Skips past <code>skip</code> nontrivia tokens, then peeks at the kind …","Peek ahead <code>n</code> tokens.","Peek at the text of the next token.","Peek at the next token.","Peeks past <code>skip</code> nontrivia tokens, then peeks at the next …","","Add a token to the current node.","","Start a new node in the syntax tree.","","Use a previously set <code>checkpoint</code> to create a new node at …","","","","","","","","","","","","Tokens are stored in reverse order","","","","","","","","","","","","","","","","","","","Apply validation passes, etc.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Kinds of syntax nodes in the Core SML language.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns <code>Some(kind)</code> if <code>s</code> is a keyword, else <code>None</code>.","Converts a lex token to a parse token.","Returns <code>Some(kind)</code> if <code>s</code> is a symbol, else <code>None</code>.","","Calls <code>U::from(self)</code>.","Returns true if <code>self</code> is the start of an atomic expression.","Returns true if <code>self</code> is the start of an atomic pattern.","Returns true if <code>self</code> is a keyword signalling a declaration.","Returns true if <code>self</code> is a keyword.","Returns true if <code>self</code> is a special constant (literal).","Returns true if <code>self</code> is trivia (whitespace or comment).","Returns true if <code>self</code> is the start of a atomic type (either …","","","","",""],"i":[36,36,36,36,36,36,36,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,113,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,4,4,98,113,113,4,113,4,113,98,4,11,98,4,4,4,0,0,0,0,4,0,4,4,11,0,0,0,4,4,0,113,4,4,4,98,4,4,4,0,0,0,0,113,0,17,17,113,17,114,113,17,17,113,17,113,0,0,17,17,0,17,17,17,17,0,17,0,0,0,114,113,17,17,17,17,17,17,0,17,0,0,0,0,0,0,0,0,19,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,23,20,21,19,22,23,24,25,25,20,19,20,20,21,21,19,19,22,22,23,23,24,24,25,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,25,19,24,20,20,21,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,20,21,19,22,23,24,25,19,22,24,25,22,23,20,21,19,22,23,24,25,22,23,19,24,25,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,0,37,0,37,0,0,37,0,0,37,0,37,0,37,0,37,0,37,0,37,0,37,0,37,0,37,0,33,34,35,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,38,40,40,42,42,44,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,45,46,37,37,33,33,34,34,35,35,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,37,37,37,37,37,37,37,37,37,37,37,37,37,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,43,39,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,39,38,40,37,33,34,35,38,39,40,41,42,43,44,45,46,47,48,33,34,47,45,46,48,38,40,26,0,26,0,26,0,0,0,26,0,26,0,26,0,26,0,61,0,61,0,26,0,61,0,26,0,61,0,61,0,61,0,61,0,61,0,26,0,61,0,61,0,26,0,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,71,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,52,55,56,59,65,71,72,53,54,57,58,53,54,57,58,54,64,60,68,69,70,26,26,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,26,26,26,26,26,26,26,26,26,26,26,26,51,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,65,66,63,51,52,56,63,62,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,59,26,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,0,0,0,0,0,0,0,0,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,49,75,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,27,31,31,49,49,30,30,75,75,76,76,73,73,77,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,49,75,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,27,31,49,30,75,76,73,77,49,27,31,49,30,75,76,73,77,27,0,0,74,78,74,78,74,78,74,78,74,78,74,78,74,78,78,74,74,78,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,28,0,28,0,28,0,82,0,0,0,82,0,82,0,82,0,28,0,82,0,82,0,82,0,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,28,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,28,28,28,28,28,79,80,81,82,82,82,82,82,82,82,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,87,85,85,80,87,86,79,81,89,90,84,28,79,80,81,82,83,84,85,86,87,88,89,90,79,80,81,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,28,79,80,81,82,83,84,85,86,87,88,89,90,80,28,79,80,81,82,83,84,85,86,87,88,89,90,0,0,0,0,29,0,29,0,29,0,29,0,0,0,29,0,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,29,92,92,93,93,94,94,95,95,96,96,97,97,29,29,29,29,29,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,96,94,29,92,93,94,95,96,97,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,29,92,93,94,95,96,97,96,92,92,29,92,93,94,95,96,97,95,93,94,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,0,107,11,98,106,101,102,107,11,98,106,101,102,98,102,98,106,107,11,98,106,101,102,107,11,98,106,101,102,107,98,102,98,98,98,98,98,107,11,98,11,11,98,98,106,107,11,11,98,106,101,102,107,11,98,106,101,102,107,11,107,107,11,98,106,101,102,11,98,98,98,107,107,107,11,98,106,98,11,11,98,98,98,98,98,98,107,98,98,98,98,98,98,98,98,106,98,106,98,106,11,107,107,107,11,98,106,101,102,11,98,107,11,98,106,101,102,107,11,98,106,101,102,107,11,98,106,101,102,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],1],[2,3],[4,4],[[]],[[]],[[]],0,[[4,4],1],0,0,[[4,5],6],[[4,5],6],[[]],0,0,0,0,[[]],0,0,[[[8,[7]],[8,[7]],9],4],0,[10,11],0,0,0,[12],0,[[],2],0,[[]],[[],7],0,[[],13],[[],13],[[],14],0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[15,3],[2,3],[16,[[3,[17]]]],[17,17],[[]],[[]],[[]],0,0,[17,18],[[17,17],1],0,[[17,5],6],[[17,5],6],[[]],[17],0,[[]],0,0,0,[[],15],[[],2],[17,16],0,[[]],[[],7],[[],13],[[],13],0,[[],14],0,0,0,0,0,0,0,0,[19,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[16,[[3,[20]]]],[16,[[3,[21]]]],[16,[[3,[19]]]],[16,[[3,[22]]]],[16,[[3,[23]]]],[16,[[3,[24]]]],[16,[[3,[25]]]],[20,20],[21,21],[19,19],[22,22],[23,23],[24,24],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,18],[[20,20],1],[[21,21],1],[[19,19],1],[[22,22],1],[[23,23],1],[[24,24],1],[[25,25],1],[25,1],[20,[[3,[26]]]],[19,[[3,[26]]]],[[20,5],6],[[20,5],6],[[21,5],6],[[21,5],6],[[19,5],6],[[19,5],6],[[22,5],6],[[22,5],6],[[23,5],6],[[23,5],6],[[24,5],6],[[24,5],6],[[25,5],6],[[25,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[21],[19],[22],[23],[24],[25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[3,[27]]]],[19,1],[24,1],[20,[[3,[28]]]],[20,1],[21,18],[20,16],[21,16],[19,16],[22,16],[23,16],[24,16],[25,16],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[19,[[3,[29]]]],[22,[[3,[29]]]],[24,[[3,[29]]]],[25,[[3,[29]]]],[22,[[3,[30]]]],[23,[[3,[30]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[22,18],[23,18],[19,[[3,[31]]]],[24,[[3,[31]]]],[25,[[3,[31]]]],0,0,0,0,0,0,[[]],[[]],[15,[[3,[32]]]],[32,32],[[]],[[32,32],1],[[32,5],6],[[]],[32],[[]],[32,15],[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,18],[34,18],[35,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[16,[[3,[37]]]],[16,[[3,[33]]]],[16,[[3,[34]]]],[16,[[3,[35]]]],[16,[[3,[38]]]],[16,[[3,[39]]]],[16,[[3,[40]]]],[16,[[3,[41]]]],[16,[[3,[42]]]],[16,[[3,[43]]]],[16,[[3,[44]]]],[16,[[3,[45]]]],[16,[[3,[46]]]],[16,[[3,[47]]]],[16,[[3,[48]]]],[37,37],[33,33],[34,34],[35,35],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,18],[40,18],[40,[[3,[37]]]],[42,[[3,[37]]]],[42,[[3,[37]]]],[44,18],[[37,37],1],[[33,33],1],[[34,34],1],[[35,35],1],[[38,38],1],[[39,39],1],[[40,40],1],[[41,41],1],[[42,42],1],[[43,43],1],[[44,44],1],[[45,45],1],[[46,46],1],[[47,47],1],[[48,48],1],[45,[[3,[47]]]],[46,[[3,[47]]]],[[37,5],6],[[37,5],6],[[33,5],6],[[33,5],6],[[34,5],6],[[34,5],6],[[35,5],6],[[35,5],6],[[38,5],6],[[38,5],6],[[39,5],6],[[39,5],6],[[40,5],6],[[40,5],6],[[41,5],6],[[41,5],6],[[42,5],6],[[42,5],6],[[43,5],6],[[43,5],6],[[44,5],6],[[44,5],6],[[45,5],6],[[45,5],6],[[46,5],6],[[46,5],6],[[47,5],6],[[47,5],6],[[48,5],6],[[48,5],6],[[]],[40,37],[43,37],[41,37],[44,37],[34,37],[48,37],[35,37],[42,37],[38,37],[39,37],[33,37],[46,37],[45,37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37],[33],[34],[35],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,18],[39,[[3,[49]]]],[37,16],[33,16],[34,16],[35,16],[38,16],[39,16],[40,16],[41,16],[42,16],[43,16],[44,16],[45,16],[46,16],[47,16],[48,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[39,[[3,[30]]]],[38,[[3,[22]]]],[40,[[3,[22]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[33,18],[34,18],[47,50],[45,18],[46,18],[48,18],[38,1],[40,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[36,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[16,[[3,[26]]]],[16,[[3,[51]]]],[16,[[3,[52]]]],[16,[[3,[53]]]],[16,[[3,[54]]]],[16,[[3,[55]]]],[16,[[3,[56]]]],[16,[[3,[57]]]],[16,[[3,[58]]]],[16,[[3,[59]]]],[16,[[3,[60]]]],[16,[[3,[61]]]],[16,[[3,[62]]]],[16,[[3,[63]]]],[16,[[3,[64]]]],[16,[[3,[65]]]],[16,[[3,[66]]]],[16,[[3,[67]]]],[16,[[3,[68]]]],[16,[[3,[69]]]],[16,[[3,[70]]]],[16,[[3,[71]]]],[16,[[3,[72]]]],[26,26],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,[[3,[37]]]],[[26,26],1],[[51,51],1],[[52,52],1],[[53,53],1],[[54,54],1],[[55,55],1],[[56,56],1],[[57,57],1],[[58,58],1],[[59,59],1],[[60,60],1],[[61,61],1],[[62,62],1],[[63,63],1],[[64,64],1],[[65,65],1],[[66,66],1],[[67,67],1],[[68,68],1],[[69,69],1],[[70,70],1],[[71,71],1],[[72,72],1],[52,[[3,[26]]]],[55,[[3,[26]]]],[56,[[3,[26]]]],[59,[[3,[26]]]],[65,[[3,[26]]]],[71,[[3,[26]]]],[72,[[3,[26]]]],[53,[[3,[26]]]],[54,[[3,[26]]]],[57,[[3,[26]]]],[58,[[3,[26]]]],[53,[[3,[26]]]],[54,[[3,[26]]]],[57,[[3,[26]]]],[58,[[3,[26]]]],[54,[[3,[26]]]],[64,18],[60,18],[68,18],[69,18],[70,18],[[26,5],6],[[26,5],6],[[51,5],6],[[51,5],6],[[52,5],6],[[52,5],6],[[53,5],6],[[53,5],6],[[54,5],6],[[54,5],6],[[55,5],6],[[55,5],6],[[56,5],6],[[56,5],6],[[57,5],6],[[57,5],6],[[58,5],6],[[58,5],6],[[59,5],6],[[59,5],6],[[60,5],6],[[60,5],6],[[61,5],6],[[61,5],6],[[62,5],6],[[62,5],6],[[63,5],6],[[63,5],6],[[64,5],6],[[64,5],6],[[65,5],6],[[65,5],6],[[66,5],6],[[66,5],6],[[67,5],6],[[67,5],6],[[68,5],6],[[68,5],6],[[69,5],6],[[69,5],6],[[70,5],6],[[70,5],6],[[71,5],6],[[71,5],6],[[72,5],6],[[72,5],6],[59,26],[57,26],[61,26],[60,26],[58,26],[56,26],[55,26],[54,26],[53,26],[52,26],[[]],[51,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,61],[69,61],[66,61],[63,61],[64,61],[68,61],[70,61],[67,61],[72,61],[[]],[71,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,[[3,[73]]]],[66,[[3,[73]]]],[63,[[3,[27]]]],[51,[[3,[74]]]],[52,[[3,[74]]]],[56,[[3,[74]]]],[63,1],[62,[[3,[32]]]],[26,16],[51,16],[52,16],[53,16],[54,16],[55,16],[56,16],[57,16],[58,16],[59,16],[60,16],[61,16],[62,16],[63,16],[64,16],[65,16],[66,16],[67,16],[68,16],[69,16],[70,16],[71,16],[72,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[59,[[3,[29]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[16,[[3,[27]]]],[15,[[3,[31]]]],[16,[[3,[49]]]],[15,[[3,[30]]]],[16,[[3,[75]]]],[15,[[3,[76]]]],[15,[[3,[73]]]],[15,[[3,[77]]]],[27,27],[31,31],[49,49],[30,30],[75,75],[76,76],[73,73],[77,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],1],[[31,31],1],[[49,49],1],[[30,30],1],[[75,75],1],[[76,76],1],[[73,73],1],[[77,77],1],[[27,5],6],[[27,5],6],[[31,5],6],[[31,5],6],[[49,5],6],[[49,5],6],[[30,5],6],[[30,5],6],[[75,5],6],[[75,5],6],[[76,5],6],[[76,5],6],[[73,5],6],[[73,5],6],[[77,5],6],[[77,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27],[31],[49],[30],[75],[76],[73],[77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,18],[49,18],[75,18],[27,16],[31,15],[49,16],[30,15],[75,16],[76,15],[73,15],[77,15],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[49,[[3,[30]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[27,[[3,[31]]]],0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[16,[[3,[74]]]],[16,[[3,[78]]]],[74,74],[78,78],[[]],[[]],[[74,74],1],[[78,78],1],[78,[[3,[26]]]],[[74,5],6],[[74,5],6],[[78,5],6],[[78,5],6],[[]],[[]],[74],[78],[[]],[[]],[74,18],[78,[[3,[28]]]],[74,16],[78,16],0,0,[[]],[[]],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,1],[[],1],[[],1],[[],1],[36,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[16,[[3,[28]]]],[16,[[3,[79]]]],[16,[[3,[80]]]],[16,[[3,[81]]]],[16,[[3,[82]]]],[16,[[3,[83]]]],[16,[[3,[84]]]],[16,[[3,[85]]]],[16,[[3,[86]]]],[16,[[3,[87]]]],[16,[[3,[88]]]],[16,[[3,[89]]]],[16,[[3,[90]]]],[28,28],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,28],1],[[79,79],1],[[80,80],1],[[81,81],1],[[82,82],1],[[83,83],1],[[84,84],1],[[85,85],1],[[86,86],1],[[87,87],1],[[88,88],1],[[89,89],1],[[90,90],1],[[28,5],6],[[28,5],6],[[79,5],6],[[79,5],6],[[80,5],6],[[80,5],6],[[81,5],6],[[81,5],6],[[82,5],6],[[82,5],6],[[83,5],6],[[83,5],6],[[84,5],6],[[84,5],6],[[85,5],6],[[85,5],6],[[86,5],6],[[86,5],6],[[87,5],6],[[87,5],6],[[88,5],6],[[88,5],6],[[89,5],6],[[89,5],6],[[90,5],6],[[90,5],6],[82,28],[[]],[81,28],[80,28],[79,28],[[]],[[]],[[]],[84,82],[89,82],[85,82],[88,82],[86,82],[90,82],[83,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,[[3,[73]]]],[85,[[3,[27]]]],[85,1],[80,[[3,[28]]]],[87,[[3,[28]]]],[86,18],[79,18],[81,18],[89,18],[90,18],[84,[[3,[32]]]],[28,16],[79,16],[80,16],[81,16],[82,16],[83,16],[84,16],[85,16],[86,16],[87,16],[88,16],[89,16],[90,16],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[80,[[3,[29]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[2,3],[16,18],[2,[[3,[91]]]],[16,18],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[16,[[3,[29]]]],[16,[[3,[92]]]],[16,[[3,[93]]]],[16,[[3,[94]]]],[16,[[3,[95]]]],[16,[[3,[96]]]],[16,[[3,[97]]]],[29,29],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,29],1],[[92,92],1],[[93,93],1],[[94,94],1],[[95,95],1],[[96,96],1],[[97,97],1],[[29,5],6],[[29,5],6],[[92,5],6],[[92,5],6],[[93,5],6],[[93,5],6],[[94,5],6],[[94,5],6],[[95,5],6],[[95,5],6],[[96,5],6],[[96,5],6],[[97,5],6],[[97,5],6],[92,29],[93,29],[94,29],[95,29],[97,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29],[92],[93],[94],[95],[96],[97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96,[[3,[73]]]],[94,[[3,[49]]]],[29,16],[92,16],[93,16],[94,16],[95,16],[96,16],[97,16],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[96,[[3,[29]]]],[92,[[3,[29]]]],[92,[[3,[29]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[95,18],[93,18],[94,18],[97,[[3,[77]]]],0,0,0,0,0,0,0,[98],0,[98],[98],[98],[98],[98],[[98,99]],[98],[98],[[98,36,100,100,100]],[[98,36,100,100,100]],[[98,36,100,100,100]],[[98,36]],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[[98,101,50]],[98],[98],[98],[[98,50]],[98],[98],[[98,102]],[[98,102]],[98],[[98,101]],[98],[36],[98],[98],[98],[[98,101,50]],[98],[36,3],[98],[98],[[98,101]],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98],[98,1],[98,1],[98],[98],[98],[98],[98],[98],[98],[98],0,0,0,0,0,0,0,[[]],[[]],[103,103],[[]],[[103,103],104],[[103,103],1],[[103,5],6],[[]],[103],[[]],[105],[[],105],[[103,103],[[3,[104]]]],[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[98,101],[106,101],[107,107],[11,11],[98,98],[106,106],[101,101],[102,102],[[]],[[]],[[]],[[]],[[]],[[]],[[107,107],104],0,[102],[[98,36],1],[98,36],[[98,36],36],[[98,36],1],[98,1],[[107,107],1],[[11,11],1],[[98,[0,[[8,[7]],108]]]],[11,18],0,0,[[98,36]],[106,109],[[107,5],6],[[11,5],6],[[11,5],6],[[98,5],6],[[106,5],6],[[101,5],6],[[102,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[110,10,9]],[11,1],[107],[[]],[[]],[[]],[[]],[[]],[[]],[11],[98,1],[98,1],[98,1],[107,36],0,[[36,10],107],[[109,[111,[4]]],11],[10,98],[[],106],[98,1],[11,109],0,[98,11],[98,11],[98,11],[98,11],[98,11],[98,11],[[107,107],[[3,[104]]]],[98,36],[[98,9],36],[[98,9],36],[98,10],[98,[[3,[107]]]],[[98,9],[[3,[107]]]],[98,107],[[98,107]],[[106,107]],[[98,36],102],[[106,36],102],[[98,101,36],102],[[106,101,36],102],[11,16],[107,10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[36,36],[[]],[[36,36],104],[[36,36],1],[[36,5],6],[[]],[10,[[3,[36]]]],[[112,10]],[10,[[3,[36]]]],[36],[[]],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[[36,36],[[3,[104]]]],[[]],[[],13],[[],13],[[],14]],"p":[[15,"bool"],[3,"SyntaxNode"],[4,"Option"],[3,"Error"],[3,"Formatter"],[6,"Result"],[3,"String"],[8,"Into"],[15,"usize"],[15,"str"],[3,"SyntaxTree"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[6,"SyntaxToken"],[6,"SyntaxNode"],[3,"File"],[8,"Iterator"],[3,"FvalBindRow"],[3,"ValBind"],[3,"FvalBind"],[3,"TyBind"],[3,"DataBind"],[3,"ConBind"],[3,"ExBind"],[4,"Expr"],[3,"LongVId"],[4,"Pat"],[4,"Ty"],[3,"TyCon"],[3,"VId"],[4,"Scon"],[3,"ValDec"],[3,"FunDec"],[3,"TypeDec"],[4,"SyntaxKind"],[4,"Dec"],[3,"DatatypeDec"],[3,"DatatypeRepDec"],[3,"AbstypeDec"],[3,"ExceptionDec"],[3,"LocalDec"],[3,"OpenDec"],[3,"SeqDec"],[3,"InfixDec"],[3,"InfixrDec"],[3,"Fixity"],[3,"NonfixDec"],[3,"LongTyCon"],[15,"u8"],[3,"FnExpr"],[3,"CaseExpr"],[3,"WhileExpr"],[3,"IfExpr"],[3,"RaiseExpr"],[3,"HandleExpr"],[3,"OrElseExpr"],[3,"AndAlsoExpr"],[3,"TypedExpr"],[3,"InfixOrAppExpr"],[4,"AtomicExpr"],[3,"SConExpr"],[3,"VIdExpr"],[3,"RecordExpr"],[3,"ExprRow"],[3,"RecSelExpr"],[3,"UnitExpr"],[3,"TupleExpr"],[3,"ListExpr"],[3,"SeqExpr"],[3,"LetExpr"],[3,"ParenExpr"],[3,"Label"],[3,"Match"],[3,"LongStrId"],[3,"StrId"],[3,"TyVar"],[3,"Mrule"],[3,"LayeredPat"],[3,"TypedPat"],[3,"ConsOrInfixPat"],[4,"AtomicPat"],[3,"WildcardPat"],[3,"SConPat"],[3,"VIdPat"],[3,"RecordPat"],[3,"PatRow"],[3,"UnitPat"],[3,"TuplePat"],[3,"ListPat"],[3,"SyntaxToken"],[3,"FunTy"],[3,"TupleTy"],[3,"ConsTy"],[3,"RecordTy"],[3,"TyRow"],[3,"TyVarTy"],[3,"Parser"],[15,"u32"],[8,"Fn"],[3,"Checkpoint"],[3,"NodeGuard"],[4,"SML"],[4,"Ordering"],[3,"SyntaxKind"],[3,"NodeBuilder"],[3,"Token"],[8,"Clone"],[3,"GreenNode"],[3,"LexToken"],[3,"Vec"],[4,"LexKind"],[8,"AstNode"],[8,"AstToken"]]},\
"pomelo_ty":{"doc":"Type inference and type checking for <code>pomelo</code>","t":[8,0,10,10,10,10,13,13,13,13,13,13,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11],"n":["HirVisitor","usages","visit_dec","visit_expr","visit_pat","visit_ty","Dec","Dec","Expr","Pat","Pat","Ty","TyUsage","UsageCtxt","ValUsage","arenas","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","exception_map","fmt","fmt","fmt","from","from","from","hash","hash","hir","into","into","into","lookup_exception","lookup_tycon","lookup_value","new","register_exception","register_tycon","register_value","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty_map","type_id","type_id","type_id","val_map","visit_databind","visit_dec","visit_expr","visit_mrule","visit_pat","visit_ty"],"q":["pomelo_ty","","","","","","pomelo_ty::usages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Run a pass over the HIR to collect all references to each …","","","","","","","","","","","","Tracks variable, type constructor, and exception usages.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,18,18,18,18,7,8,7,7,8,8,0,0,0,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,6,6,6,6,6,6,6,7,8,6,7,8,6,7,8,6,6,7,8,6,6,6,6,6,6,6,6],"f":[0,0,[[[2,[1]]]],[[[2,[3]]]],[[[2,[4]]]],[[[2,[5]]]],0,0,0,0,0,0,0,0,0,[6],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[6,6],[[]],[[]],[[]],[[7,7],9],[[8,8],9],0,[[7,10],11],[[8,10],11],[[6,10],11],[[]],[[]],[[]],[7],[8],0,[[]],[[]],[[]],[[6,[2,[1]]],12],[6,12],[6,12],[13,6],[[6,[2,[3]],[2,[1]]]],[[6,8]],[[6,7]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[],15],[[],15],[[],15],0,[[6,16]],[[6,[2,[1]]]],[[6,[2,[3]]]],[[6,17]],[[6,[2,[4]]]],[[6,[2,[5]]]]],"p":[[3,"Dec"],[3,"Idx"],[3,"Expr"],[3,"Pat"],[3,"Ty"],[3,"UsageCtxt"],[4,"ValUsage"],[4,"TyUsage"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"File"],[4,"Result"],[3,"TypeId"],[3,"DataBind"],[3,"MRule"],[8,"HirVisitor"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
